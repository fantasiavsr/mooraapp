<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Moora Decision Making</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
    />
  </head>
  <body>
    <div id="root"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.21.1/babel.min.js"></script>

    <script type="text/babel">
      const { useState } = React;

      const MooraApp = () => {
        const criteria = [
          { name: 'lokasi', label: 'Lokasi yang Strategis' },
          { name: 'jenisBarang', label: 'Jenis Barang yang Dijual' },
          { name: 'kualitasLayanan', label: 'Kualitas Layanan' },
          { name: 'kebersihan', label: 'Kebersihan' },
          { name: 'keamanan', label: 'Keamanan' },
          { name: 'ketersediaanParkir', label: 'Ketersediaan Parkir' },
          { name: 'banyaknyaPembayaran', label: 'Banyaknya Metode Pembayaran' },
          { name: 'jarakRumah', label: 'Jarak dari Rumah' },
          { name: 'pajakPpn', label: 'Pajak PPN' },
          { name: 'hargaParkir', label: 'Harga Parkir' },
        ];

        const [weights, setWeights] = useState({});
        const [result, setResult] = useState([]);
        const [alternatives, setAlternatives] = useState([]);

        const handleWeightChange = (e) => {
          const { name, value } = e.target;
          setWeights({ ...weights, [name]: value });
        };

        const handleGenerateAlternatives = () => {
          const generatedAlternatives = generateAlternatives();
          setAlternatives(generatedAlternatives);
          setResult([]);
        };

        const handleSubmit = (e) => {
          e.preventDefault();

          const allWeightsFilled = criteria.every((criterion) => weights[criterion.name]);
          if (!allWeightsFilled) {
            alert('Harap isi semua bobot kriteria sebelum melakukan perhitungan.');
            return;
          }

          const normalizedMatrix = calculateNormalizedMatrix();
          const optimizationValues = calculateOptimizationValues(normalizedMatrix);
          const rankings = calculateRankings(optimizationValues);

          setResult(rankings);
        };

        function generateAlternatives() {
          const generatedAlternatives = [];

          for (let i = 0; i < 20; i++) {
            const alternative = {};

            for (const criterion of criteria) {
              alternative[criterion.name] = Math.random() * (0.8 - 0.2) + 0.2;
            }

            generatedAlternatives.push(alternative);
          }

          return generatedAlternatives;
        }

        function calculateNormalizedMatrix() {
          const normalizedMatrix = [];

          for (let i = 0; i < alternatives.length; i++) {
            const alternative = alternatives[i];
            const sumOfSquares = criteria.reduce((sum, criterion) => {
              const value = alternative[criterion.name];
              return sum + value ** 2;
            }, 0);

            const sqrtSumOfSquares = Math.sqrt(sumOfSquares);

            const normalizedAlternative = {};

            for (const criterion of criteria) {
              const value = alternative[criterion.name];
              normalizedAlternative[criterion.name] = value / sqrtSumOfSquares;
            }

            normalizedMatrix.push(normalizedAlternative);
          }

          return normalizedMatrix;
        }

        function calculateOptimizationValues(normalizedMatrix) {
          const optimizationValues = [];

          for (let i = 0; i < normalizedMatrix.length; i++) {
            const alternative = normalizedMatrix[i];

            const maxValues = criteria.reduce((max, criterion) => {
              const value = alternative[criterion.name];
              return { ...max, [criterion.name]: value > max[criterion.name] ? value : max[criterion.name] };
            }, {});

            const minValues = criteria.reduce((min, criterion) => {
              const value = alternative[criterion.name];
              return { ...min, [criterion.name]: value < min[criterion.name] ? value : min[criterion.name] };
            }, {});

            const optimizationValue = criteria.reduce((sum, criterion) => {
              const weight = weights[criterion.name];
              const max = maxValues[criterion.name];
              const min = minValues[criterion.name];
              return sum + weight * (max - min);
            }, 0);

            optimizationValues.push(optimizationValue);
          }

          return optimizationValues;
        }

        function calculateRankings(optimizationValues) {
          const rankings = optimizationValues.map((value, index) => ({ alternative: index + 1, score: value }));

          rankings.sort((a, b) => b.score - a.score);

          return rankings;
        }

        return (
          <div className="container">
            <h1>Aplikasi Pengambilan Keputusan Moora</h1>
            <form onSubmit={handleSubmit}>
              <div className="row">
                <div className="col-md-2">
                  <h2>Bobot Kriteria</h2>
                  {criteria.map((criterion, index) => (
                    <div key={index} className="mb-3">
                      <label htmlFor={criterion.name} className="form-label">
                        {criterion.label}
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="1"
                        step="0.1"
                        id={criterion.name}
                        name={criterion.name}
                        className="form-control"
                        value={weights[criterion.name] || ''}
                        onChange={handleWeightChange}
                      />
                    </div>
                  ))}
                  <button type="button" className="btn btn-secondary" onClick={handleGenerateAlternatives}>
                    Generate Alternatives
                  </button>
                  <button type="submit" className="btn btn-primary" disabled={alternatives.length === 0}>
                    Hitung
                  </button>
                </div>
                <div className="col-md-6">
                  <h2>Data Alternatif</h2>
                  <table className="table">
                    <thead>
                      <tr>
                        <th>No.</th>
                        {criteria.map((criterion, index) => (
                          <th key={index}>{criterion.name}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {alternatives.map((alternative, index) => (
                        <tr key={index}>
                          <td>{index + 1}</td>
                          {criteria.map((criterion, i) => (
                            <td key={i}>{alternative[criterion.name].toFixed(4)}</td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            </form>
            {result.length > 0 && (
              <div>
                <h2>Hasil Perankingan Alternatif</h2>
                <table className="table">
                  <thead>
                    <tr>
                      <th>No.</th>
                      <th>Alternatif</th>
                      <th>Skor</th>
                    </tr>
                  </thead>
                  <tbody>
                    {result.map((ranking, index) => (
                      <tr key={index}>
                        <td>{index + 1}</td>
                        <td>{`Alternatif ${ranking.alternative}`}</td>
                        <td>{ranking.score.toFixed(4)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        );
      };

      ReactDOM.createRoot(document.getElementById('root')).render(<MooraApp />);
    </script>
  </body>
</html>
