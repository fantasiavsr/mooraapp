<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Moora Decision Making</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
    />
  </head>
  <body>
    <div id="root"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.development.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.21.1/babel.min.js"></script>
    <script type="text/babel">
      const { useState } = React;

      const MooraApp = () => {
        const criteria = [
          { name: "lokasi", label: "Lokasi yang Strategis" },
          { name: "jenisBarang", label: "Jenis Barang yang Dijual" },
          { name: "kualitasLayanan", label: "Kualitas Layanan" },
          { name: "kebersihan", label: "Kebersihan" },
          { name: "keamanan", label: "Keamanan" },
          { name: "ketersediaanParkir", label: "Ketersediaan Parkir" },
          { name: "banyaknyaPembayaran", label: "Banyaknya Metode Pembayaran" },
          { name: "jarakRumah", label: "Jarak dari Rumah" },
          { name: "pajakPpn", label: "Pajak PPN" },
          { name: "hargaParkir", label: "Harga Parkir" },
        ];

        const [weights, setWeights] = useState({});
        const [result, setResult] = useState([]);
        const [alternatives, setAlternatives] = useState([]);

        const handleWeightChange = (e) => {
          const { name, value } = e.target;
          setWeights({ ...weights, [name]: value });
        };

        const handleSubmit = (e) => {
          e.preventDefault();

          // Check if at least one weight is filled and not 0
          const areWeightsComplete = criteria.some(
            (criterion) =>
              weights[criterion.name] !== undefined &&
              weights[criterion.name] !== 0 &&
              weights[criterion.name] !== "0"
          );

          if (!areWeightsComplete) {
            alert(
              "Silakan isi bobot kriteria dahulu! (minimal 1) dan tidak boleh 0"
            );
            return;
          }

          const normalizedMatrix = calculateNormalizedMatrix();
          const optimizationValues =
            calculateOptimizationValues(normalizedMatrix);
          const rankings = calculateRankings(optimizationValues);

          setResult(rankings);
        };

        const handleGenerateAlternatives = () => {
          const generatedAlternatives = generateAlternatives();
          setAlternatives(generatedAlternatives);
        };

        function generateAlternatives() {
          const alternativeNames = [
            "Alfamart",
            "Alfamidi",
            "Indomart",
            "Yogya Group",
            "Ranch Market",
            "Superindo",
            "Carrefour",
          ];

          const generatedAlternatives = [];

          for (let i = 0; i < 20; i++) {
            const alternative = {};

            for (const criterion of criteria) {
              alternative[criterion.name] = Math.random() * (0.8 - 0.2) + 0.2;
            }

            const alternativeName =
              alternativeNames[
                Math.floor(Math.random() * alternativeNames.length)
              ];
            let suffix = "";
            let duplicateCount = 0;

            while (true) {
              const duplicateNames = generatedAlternatives.filter(
                (alt) => alt.name === alternativeName + suffix
              );

              if (duplicateNames.length === 0) {
                if (duplicateCount === 0) {
                  alternative.name = alternativeName;
                } else {
                  alternative.name =
                    alternativeName + " " + (duplicateCount + 1);
                }
                break;
              }

              duplicateCount++;
              suffix = " " + (duplicateCount + 1);
            }

            generatedAlternatives.push(alternative);
          }

          return generatedAlternatives;
        }

        function calculateNormalizedMatrix() {
          const normalizedMatrix = [];

          for (const criterion of criteria) {
            const values = alternatives.map(
              (alternative) => alternative[criterion.name]
            );
            const sumOfSquares = values.reduce((acc, val) => acc + val ** 2, 0);
            const sqrtSumOfSquares = Math.sqrt(sumOfSquares);
            const normalizedValues = values.map(
              (val) => val / sqrtSumOfSquares
            );

            normalizedMatrix.push(normalizedValues);
          }

          return normalizedMatrix;
        }

        function calculateOptimizationValues(normalizedMatrix) {
          const optimizationValues = [];

          for (const alternative of alternatives) {
            const values = [];

            for (let i = 0; i < criteria.length; i++) {
              const criterion = criteria[i];
              const weightsValue = weights[criterion.name] || 0;
              const maxValue = Math.max(...normalizedMatrix[i]);
              const minValue = Math.min(...normalizedMatrix[i]);

              const optimizationValue =
                (weightsValue * (alternative[criterion.name] - minValue)) /
                (maxValue - minValue);
              values.push(optimizationValue);
            }

            optimizationValues.push(values);
          }

          return optimizationValues;
        }

        function calculateRankings(optimizationValues) {
          const rankings = optimizationValues.map((values, index) => ({
            alternative: alternatives[index].name,
            score: values.reduce((acc, val) => acc + val, 0),
          }));

          rankings.sort((a, b) => b.score - a.score);

          return rankings;
        }

        return (
          <div className="container py-5">
            <h1 className="text-center mb-5">
              Aplikasi Pengambilan Keputusan Moora
            </h1>
            <div className="row">
              <div className="col-md-4">
                <h2>Bobot Kriteria</h2>
                <form onSubmit={handleSubmit}>
                  {criteria.map((criterion, index) => (
                    <div key={index} className="mb-3">
                      <label htmlFor={criterion.name} className="form-label">
                        {criterion.label}
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="1"
                        step="0.001"
                        id={criterion.name}
                        name={criterion.name}
                        className="form-control"
                        value={weights[criterion.name] || ""}
                        onChange={handleWeightChange}
                      />
                    </div>
                  ))}
                  <button type="submit" className="btn btn-primary">
                    Hitung
                  </button>
                </form>
              </div>
              <div className="col-md-8">
                <h2>Data Alternatif</h2>
                {alternatives.length > 0 ? (
                  <table className="table table-striped">
                    <thead>
                      <tr>
                        <th>No.</th>
                        <th>Nama Alternatif</th>
                        {criteria.map((criterion, index) => (
                          <th key={index}>{criterion.name}</th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {alternatives.map((alternative, index) => (
                        <tr key={index}>
                          <td>{index + 1}</td>
                          <td>{alternative.name}</td>
                          {criteria.map((criterion, i) => (
                            <td key={i}>
                              {alternative[criterion.name].toFixed(4)}
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  <p>
                    Belum ada data alternatif. Silakan klik tombol "Generate
                    Alternatif".
                  </p>
                )}
                <button
                  type="button"
                  className="btn btn-secondary"
                  onClick={handleGenerateAlternatives}
                >
                  Generate Alternatif
                </button>
              </div>
            </div>
            {result.length > 0 && (
              <div>
                <h2 className="mt-5">Hasil Perankingan Alternatif</h2>
                <table className="table table-striped">
                  <thead>
                    <tr>
                      <th>No.</th>
                      <th>Alternatif</th>
                      <th>Skor</th>
                    </tr>
                  </thead>
                  <tbody>
                    {result.map((ranking, index) => (
                      <tr key={index}>
                        <td>{index + 1}</td>
                        <td>{ranking.alternative}</td>
                        <td>{ranking.score.toFixed(4)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        );
      };

      ReactDOM.createRoot(document.getElementById("root")).render(<MooraApp />);
    </script>
  </body>
</html>
